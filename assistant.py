import streamlit as st

from utils import(
    create_email_chain,
    create_study_plan_chain,
    create_knowledge_qna_chain,
    create_action_items_chain,
    initialize_agent_executor,
    get_llm_instance,
)

llm = get_llm_instance()

email_chain = create_email_chain(llm)
study_plan_chain = create_study_plan_chain(llm)
knowledge_qna_chain = create_knowledge_qna_chain(llm)
action_items_chain = create_action_items_chain(llm)
agent_executor = initialize_agent_executor()

st.title("Personal Assistant with LangChain")
task_type = st.sidebar.selectbox("Select a Task",[
    "Draft Email","Knowledge-Based Q&A","Generate Study Plan","Extract Action Items","Tool-Using Agent"
])

if task_type == "Draft Email":
    st.header("Draft an Email based on context")
    context_input = st.text_area("Enter the email context")
    if st.button("Draft Email"):
        result = email_chain.run(context=context_input)
        st.text_area("Generated Email",result,height=300)

elif task_type=="Knowledge-Based Q&A":
    st.header("Knowledge based Question Answering")
    main_input = st.text_input("Enter the knowledge Domain (Eg:Finance, Technology)")
    question_input = st.text_area("Enter your question")
    if st.button("Get Answer"):
        result = knowledge_qna_chain.run(domain=main_input,question=question_input)
        st.text_area("Answer",result,height=300)

elif task_type=="Generate Study Plan":
    st.header("Generate a Study Plan based on context")
    topic_input = st.text_input("Enter the topic to study")
    duration_input = st.text_input("Enter the duration (Eg: 1 week, 1 month)")
    if st.button("Generate Study Plan"):
        result = study_plan_chain.run(topic=topic_input,duration=duration_input)
        st.text_area("Study Plan",result,height=300)

elif task_type=="Extract Action Items":
    st.header("Extract Action Items from a meeting notes")
    notes_input = st.text_area("Enter the meeting notes")
    if st.button("Extract Action Items"):
        result = action_items_chain.run(notes=notes_input)
        st.text_area("Action Items",result,height=300)

elif task_type=="Tool-Using Agent":
    st.header("Tool-Using Agent")
    agent_input = st.text_input("Enter your query")
    if st.button("Run Agent"):
        try:
            execution_results = agent_executor(agent_input)

            if isinstance(execution_results,dict) and 'intermediate_steps' in execution_results and execution_results['intermediate_steps']:
                final_result = execution_results['intermediate_steps'][-1][-1]
            else:
                final_result = execution_results.get('output',"No meaningful output was generated by agent")
            
            st.text_area("Agent Output",final_result,height=300)
        except Exception as e:
            st.error(f"An error occurred: {e}")